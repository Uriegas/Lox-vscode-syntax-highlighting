{
	"information_for_contributors": [
		"Contribute at: https://github.com/Uriegas/Lox-Vscode-extension"
	],
	"name": "Lox",
	"scopeName": "source.lox",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"includ": "#digits"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#constants-and-special-vars"
		},
		{
			"include": "#strings"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.lox",
					"match": "\\/\\/.*"
				}
			]
		},
		"digits" : {
			"patterns": [
				{
					"name": "constant.numeric.lox",
					"match": "[0-9]+(?:.[0-9]+)?"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.comma.lox",
					"match": ","
				},
				{
					"name": "punctuation.terminator.lox",
					"match": ";"
				},
				{
					"name": "punctuation.dot.lox",
					"match": "\\."
				}
			]
		},
		"keywords": {
				"patterns": [
					{
						"name": "constant.language.boolean.lox",
						"match": "(true|false)"
					},
					{
						"name": "support.function.lox",
						"match": "(print)"
					},
					{
						"name": "keyword.control.lox",
						"match": "(if|else|while|for|return|and|or)"
					},
					{
						"name": "variable.language.lox",
						"match": "(this|super)"
					},
					{
						"name": "constant.language.null.lox",
						"match": "(nil)"
					}
				]
		},
		"constants-and-special-vars": {
			"patterns": [
				{
					"name": "constant.language.dart",
					"match": "(?<!\\$)\\b(true|false|null)\\b(?!\\$)"
				},
				{
					"name": "variable.language.dart",
					"match": "(?<!\\$)\\b(this|super)\\b(?!\\$)"
				},
				{
					"name": "constant.numeric.dart",
					"match": "(?<!\\$)\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b(?!\\$)"
				},
				{
					"name": "support.class.dart",
					"match": "(?<![a-zA-Z0-9_$])([_$]*[A-Z][a-zA-Z0-9_$]*|bool\\b|num\\b|int\\b|double\\b|dynamic\\b)"
				},
				{
					"match": "([_$]*[a-z][a-zA-Z0-9_$]*)(<|\\(|\\s+=>)",
					"captures": {
						"1": {
							"name": "entity.name.function.dart"
						}
					}
				}
			]
		},
		"string-interp": {
			"patterns": [
				{
					"match": "\\$([a-zA-Z0-9_]+)",
					"captures": {
						"1": {
							"name": "variable.parameter.dart"
						}
					}
				},
				{
					"name": "string.interpolated.expression.dart",
					"begin": "\\$\\{",
					"end": "\\}",
					"patterns": [
						{
							"include": "#constants-and-special-vars",
							"name": "variable.parameter.dart"
						},
						{
							"include": "#strings"
						},
						{
							"name": "variable.parameter.dart",
							"match": "[a-zA-Z0-9_]+"
						}
					]
				},
				{
					"name": "constant.character.escape.dart",
					"match": "\\\\."
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.interpolated.triple.double.dart",
					"begin": "(?<!r)\"\"\"",
					"end": "\"\"\"(?!\")",
					"patterns": [
						{
							"include": "#string-interp"
						}
					]
				},
				{
					"name": "string.interpolated.triple.single.dart",
					"begin": "(?<!r)'''",
					"end": "'''(?!')",
					"patterns": [
						{
							"include": "#string-interp"
						}
					]
				},
				{
					"name": "string.quoted.triple.double.dart",
					"begin": "r\"\"\"",
					"end": "\"\"\"(?!\")"
				},
				{
					"name": "string.quoted.triple.single.dart",
					"begin": "r'''",
					"end": "'''(?!')"
				},
				{
					"name": "string.interpolated.double.dart",
					"begin": "(?<!\\|r)\"",
					"end": "\"",
					"patterns": [
						{
							"name": "invalid.string.newline",
							"match": "\\n"
						},
						{
							"include": "#string-interp"
						}
					]
				},
				{
					"name": "string.quoted.double.dart",
					"begin": "r\"",
					"end": "\"",
					"patterns": [
						{
							"name": "invalid.string.newline",
							"match": "\\n"
						}
					]
				},
				{
					"name": "string.interpolated.single.dart",
					"begin": "(?<!\\|r)'",
					"end": "'",
					"patterns": [
						{
							"name": "invalid.string.newline",
							"match": "\\n"
						},
						{
							"include": "#string-interp"
						}
					]
				},
				{
					"name": "string.quoted.single.dart",
					"begin": "r'",
					"end": "'",
					"patterns": [
						{
							"name": "invalid.string.newline",
							"match": "\\n"
						}
					]
				}
			]
		}
	}
}